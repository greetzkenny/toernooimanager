// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teams     Team[]
  applications Application[]
}

enum Role {
  ADMIN
  USER
}

model Team {
  id           String       @id @default(uuid())
  name         String
  ownerId      String
  owner        User         @relation(fields: [ownerId], references: [id])
  tournamentId String?
  tournament   Tournament?  @relation(fields: [tournamentId], references: [id])
  points       Int        @default(0)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Tournament {
  id           String     @id @default(uuid())
  name         String
  startDate    DateTime
  endDate      DateTime?
  matchDuration Int       @default(15) // in minutes
  stage        Stage     @default(GROUP)
  teams        Team[]
  matches      Match[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  applications Application[]
}

enum Stage {
  GROUP
  KNOCKOUT
  FINALS
}

model Match {
  id            String    @id @default(uuid())
  tournamentId  String
  tournament    Tournament @relation(fields: [tournamentId], references: [id])
  team1Id       String?
  team2Id       String?
  team1Score    Int?      @default(0)
  team2Score    Int?      @default(0)
  winnerId      String?
  date          DateTime?
  duration      Int       // in minutes
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Application {
  id           String     @id @default(uuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  tournamentId String
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  status       Status     @default(PENDING)
  createdAt    DateTime   @default(now())
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}
